# -*- coding: utf-8 -*-
"""Credit_Card_Trans_Extract_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DKuT2JWfZ9meyKi0-TmUhQ4P5a-7wPkB
"""

import streamlit as st
import pdfplumber
import pandas as pd
import re
from io import BytesIO
def extract_transactions_from_pdf(file):
    transactions = []

    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if not text:
                continue
            lines = text.split('\n')
            for line in lines:
                match = re.search(
                    r'(\d{1,2} \w{3} 2025)\s+([A-Z0-9\-\*\s\(\)\.]+?)\s+(\d{1,3}(?:,\d{3})*\.\d{2})',
                    line
                )
                if match:
                    date = match.group(1)
                    location = match.group(2).strip()
                    amount = match.group(3).replace(',', '')
                    transactions.append([date, location, float(amount)])
    return transactions

# Streamlit app interface
st.set_page_config(page_title="Credit Card Transaction Extractor", layout="centered")
st.title("üìÑ Credit Card Transaction Extractor")

uploaded_files = st.file_uploader("Upload PDF statements", type="pdf", accept_multiple_files=True)

if uploaded_files:
    all_data = []

    for file in uploaded_files:
        extracted = extract_transactions_from_pdf(BytesIO(file.read()))
        all_data.extend(extracted)

    if all_data:
        df = pd.DataFrame(all_data, columns=["Transaction Date", "Location", "Amount (PKR)"])
        st.success(f"‚úÖ Extracted {len(df)} transactions.")
        st.dataframe(df)

        # Download button
        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button("üì• Download CSV", data=csv, file_name="transactions.csv", mime="text/csv")
    else:
        st.warning("‚ö†Ô∏è No valid transactions found in uploaded PDFs.")

